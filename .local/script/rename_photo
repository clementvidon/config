#!/bin/bash

# @author       clemedon (ClÃ©ment Vidon)
# @brief        Rename pictures based on their creation date, file size, and a user-defined prefix
# @usage        ./rename_pictures.sh /path/to/directory "MY_PREFIX"
#
# Also generates a hidden undo script in the target directory.
#
# Depends on: exiftool

# Detect the operating system and set the appropriate stat command
if [[ "$(uname)" == "Darwin" ]]; then
    # macOS settings
    STAT_CMD="stat -f%z"
elif [[ "$(uname)" == "Linux" ]]; then
    # Linux settings
    STAT_CMD="stat -c%s"
else
    echo "Unsupported operating system."
    exit 1
fi

# Check if the target directory is provided
if [ -z "$1" ]; then
    echo "You have to specify a target directory."
    exit 1
fi

# Check if the prefix is provided
if [ -z "$2" ]; then
    echo "You have to specify a prefix for all the filenames (e.g., GR3_CV or PHONE_CV)."
    exit 1
fi

# Assign the target directory and prefix
target_dir="$1"
prefix="$2"

# Create the undo script in the target directory
undo_script="$target_dir/.undo_$(date +"%y%m%d%H%M%S").sh"
echo "#!/bin/bash" > "$undo_script"
chmod +x "$undo_script"

# Regex pattern to match the new format with the specified prefix
pattern="^${prefix}[0-9]{2}_[0-9]{4}_[0-9]{6}_[0-9]{8}\.[A-Z0-9]{3,4}$"

# Rename files based on their EXIF DateTimeOriginal and size
for f in "$target_dir"/*; do
    if [ -f "$f" ]; then
        # Skip files that already match the pattern
        basename_f=$(basename "$f")
        if [[ "$basename_f" =~ $pattern ]]; then
            echo "Skipping already renamed file: $f"
            continue
        fi

        # Get the creation date from EXIF metadata in YYMMDDHHMMSS format
        exif_date=$(exiftool -DateTimeOriginal -d "%y%m%d%H%M%S" "$f" | awk -F': ' '{print $2}')

        if [ -z "$exif_date" ]; then
            echo "No DateTimeOriginal found for $f, skipping..."
            continue
        fi

        # Split the date into year, month, day, hour, minute, and second
        year="${exif_date:0:2}"
        month="${exif_date:2:2}"
        day="${exif_date:4:2}"
        time="${exif_date:6:6}"

        # Get the file size in bytes and pad to 8 digits
        bytes=$(printf "%08d" "$($STAT_CMD "$f")")

        # Convert the file extension to uppercase
        ext="${f##*.}"
        ext=$(echo "$ext" | tr '[:lower:]' '[:upper:]')

        # Define the new filename with the specified prefix
        newfile="$target_dir/${prefix}${year}_${month}${day}_${time}_${bytes}.${ext}"

        # Rename the file and log the undo command
        mv -vn "$f" "$newfile"
        echo "mv -v \"$newfile\" \"$f\"" >> "$undo_script"
    fi
done
